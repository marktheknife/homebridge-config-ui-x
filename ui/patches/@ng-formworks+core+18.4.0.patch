diff --git a/node_modules/@ng-formworks/core/fesm2022/ng-formworks-core.mjs b/node_modules/@ng-formworks/core/fesm2022/ng-formworks-core.mjs
index e601881..a15e2b0 100644
--- a/node_modules/@ng-formworks/core/fesm2022/ng-formworks-core.mjs
+++ b/node_modules/@ng-formworks/core/fesm2022/ng-formworks-core.mjs
@@ -6690,6 +6690,9 @@ class JsonSchemaFormService {
     }
     setArrayItemTitle(parentCtx = {}, childNode = null, index = null) {
         const parentNode = parentCtx.layoutNode;
+        if (parentNode.options.buttonText) {
+            return parentNode.options.buttonText;
+        }
         const parentValues = this.getFormControlValue(parentCtx);
         const isArrayItem = (parentNode.type || '').slice(-5) === 'array' && isArray(parentValues);
         const text = JsonPointer.getFirst(isArrayItem && childNode.type !== '$ref'
@@ -7176,7 +7179,7 @@ class CheckboxComponent {
     static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.7", type: CheckboxComponent, selector: "checkbox-widget", inputs: { layoutNode: "layoutNode", layoutIndex: "layoutIndex", dataIndex: "dataIndex" }, ngImport: i0, template: `
     <label
       [attr.for]="'control' + layoutNode?._id"
-      [class]="options?.itemLabelHtmlClass || ''">
+      [class]="options?.itemLabelHtmlClass || ' hb-uix-switch'">
       <input *ngIf="boundControl"
         [formControl]="formControl"
         [attr.aria-describedby]="'control' + layoutNode?._id + 'Status'"
@@ -7203,6 +7206,7 @@ class CheckboxComponent {
       <span *ngIf="options?.title"
         [style.display]="options?.notitle ? 'none' : ''"
         [innerHTML]="options?.title"></span>
+      <span class="hb-uix-slider hb-uix-round"></span>
     </label>`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }] }); }
 }
 i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImport: i0, type: CheckboxComponent, decorators: [{
@@ -7213,7 +7217,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImpor
                     template: `
     <label
       [attr.for]="'control' + layoutNode?._id"
-      [class]="options?.itemLabelHtmlClass || ''">
+      [class]="options?.itemLabelHtmlClass || ' hb-uix-switch'">
       <input *ngIf="boundControl"
         [formControl]="formControl"
         [attr.aria-describedby]="'control' + layoutNode?._id + 'Status'"
@@ -7240,6 +7244,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImpor
       <span *ngIf="options?.title"
         [style.display]="options?.notitle ? 'none' : ''"
         [innerHTML]="options?.title"></span>
+      <span class="hb-uix-slider hb-uix-round"></span>
     </label>`,
                 }]
         }], ctorParameters: () => [{ type: JsonSchemaFormService }], propDecorators: { layoutNode: [{
@@ -7289,7 +7294,7 @@ class CheckboxesComponent {
     <div *ngIf="layoutOrientation === 'horizontal'" [class]="options?.htmlClass || ''">
       <label *ngFor="let checkboxItem of checkboxList"
         [attr.for]="'control' + layoutNode?._id + '/' + checkboxItem.value"
-        [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
+        [class]="(options?.itemLabelHtmlClass || 'hb-uix-switch ') + (checkboxItem.checked ?
           (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
           (' ' + (options?.style?.unselected || '')))">
         <input type="checkbox"
@@ -7303,6 +7308,7 @@ class CheckboxesComponent {
           [value]="checkboxItem.value"
           (change)="updateValue($event)">
         <span [innerHTML]="checkboxItem.name"></span>
+        <span class="hb-uix-slider hb-uix-round"></span>
       </label>
     </div>
 
@@ -7311,7 +7317,7 @@ class CheckboxesComponent {
       <div *ngFor="let checkboxItem of checkboxList" [class]="options?.htmlClass || ''">
         <label
           [attr.for]="'control' + layoutNode?._id + '/' + checkboxItem.value"
-          [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
+          [class]="(options?.itemLabelHtmlClass || 'hb-uix-switch ') + (checkboxItem.checked ?
             (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
             (' ' + (options?.style?.unselected || '')))">
           <input type="checkbox"
@@ -7319,12 +7325,13 @@ class CheckboxesComponent {
             [checked]="checkboxItem.checked"
             [class]="options?.fieldHtmlClass || ''"
             [disabled]="controlDisabled"
-            [id]="options?.name + '/' + checkboxItem.value"
+            [id]="'control' + layoutNode?._id + '/' + checkboxItem.value"
             [name]="checkboxItem?.name"
             [readonly]="options?.readonly ? 'readonly' : null"
             [value]="checkboxItem.value"
             (change)="updateValue($event)">
           <span [innerHTML]="checkboxItem?.name"></span>
+          <span class="hb-uix-slider hb-uix-round"></span>
         </label>
       </div>
     </div>`, isInline: true, dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
@@ -7344,9 +7351,9 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImpor
     <div *ngIf="layoutOrientation === 'horizontal'" [class]="options?.htmlClass || ''">
       <label *ngFor="let checkboxItem of checkboxList"
         [attr.for]="'control' + layoutNode?._id + '/' + checkboxItem.value"
-        [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
+        [class]="(options?.itemLabelHtmlClass || 'hb-uix-switch ') + (checkboxItem.checked ?
           (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-          (' ' + (options?.style?.unselected || '')))">
+          (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
         <input type="checkbox"
           [attr.required]="options?.required"
           [checked]="checkboxItem.checked"
@@ -7358,6 +7365,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImpor
           [value]="checkboxItem.value"
           (change)="updateValue($event)">
         <span [innerHTML]="checkboxItem.name"></span>
+        <span class="hb-uix-slider hb-uix-round"></span>
       </label>
     </div>
 
@@ -7366,20 +7374,21 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImpor
       <div *ngFor="let checkboxItem of checkboxList" [class]="options?.htmlClass || ''">
         <label
           [attr.for]="'control' + layoutNode?._id + '/' + checkboxItem.value"
-          [class]="(options?.itemLabelHtmlClass || '') + (checkboxItem.checked ?
+          [class]="(options?.itemLabelHtmlClass || 'hb-uix-switch ') + (checkboxItem.checked ?
             (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-            (' ' + (options?.style?.unselected || '')))">
+            (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
           <input type="checkbox"
             [attr.required]="options?.required"
             [checked]="checkboxItem.checked"
             [class]="options?.fieldHtmlClass || ''"
             [disabled]="controlDisabled"
-            [id]="options?.name + '/' + checkboxItem.value"
+            [id]="'control' + layoutNode?._id + '/' + checkboxItem.value"
             [name]="checkboxItem?.name"
             [readonly]="options?.readonly ? 'readonly' : null"
             [value]="checkboxItem.value"
             (change)="updateValue($event)">
           <span [innerHTML]="checkboxItem?.name"></span>
+          <span class="hb-uix-slider hb-uix-round"></span>
         </label>
       </div>
     </div>`,
@@ -7777,7 +7786,7 @@ class RadiosComponent {
         [class]="(options?.itemLabelHtmlClass || '') +
           ((controlValue + '' === radioItem?.value + '') ?
           (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-          (' ' + (options?.style?.unselected || '')))">
+          (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
         <input type="radio"
           [attr.aria-describedby]="'control' + layoutNode?._id + 'Status'"
           [attr.readonly]="options?.readonly ? 'readonly' : null"
@@ -7802,7 +7811,7 @@ class RadiosComponent {
           [class]="(options?.itemLabelHtmlClass || '') +
             ((controlValue + '' === radioItem?.value + '') ?
             (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-            (' ' + (options?.style?.unselected || '')))">
+            (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
           <input type="radio"
             [attr.aria-describedby]="'control' + layoutNode?._id + 'Status'"
             [attr.readonly]="options?.readonly ? 'readonly' : null"
@@ -7839,7 +7848,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImpor
         [class]="(options?.itemLabelHtmlClass || '') +
           ((controlValue + '' === radioItem?.value + '') ?
           (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-          (' ' + (options?.style?.unselected || '')))">
+          (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
         <input type="radio"
           [attr.aria-describedby]="'control' + layoutNode?._id + 'Status'"
           [attr.readonly]="options?.readonly ? 'readonly' : null"
@@ -7864,7 +7873,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImpor
           [class]="(options?.itemLabelHtmlClass || '') +
             ((controlValue + '' === radioItem?.value + '') ?
             (' ' + (options?.activeClass || '') + ' ' + (options?.style?.selected || '')) :
-            (' ' + (options?.style?.unselected || '')))">
+            (' ' + (options?.style?.unselected || ' hb-uix-switch')))">
           <input type="radio"
             [attr.aria-describedby]="'control' + layoutNode?._id + 'Status'"
             [attr.readonly]="options?.readonly ? 'readonly' : null"
@@ -8250,7 +8259,7 @@ class SectionComponent {
         [class]="options?.labelHelpBlockClass || ''"
         [innerHTML]="options?.description"></p>
       </div>
-    </fieldset>`, isInline: true, styles: [".legend{font-weight:700}.expandable>legend:before,.expandable>label:before{content:\"\\25b6\";padding-right:.3em}.expanded>legend:before,.expanded>label:before{content:\"\\25bc\";padding-right:.2em}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: RootComponent, selector: "root-widget", inputs: ["dataIndex", "layoutIndex", "layout", "isOrderable", "isFlexItem"] }] }); }
+    </fieldset>`, isInline: true, styles: [".legend{font-weight:700}.expandable > legend, .expandable > label, .expanded > legend, .expanded > label  {cursor: pointer;}.expandable > legend:before, .expandable > label:before  {font-weight: 900;font-family: 'Font Awesome 5 Free';content: '\\f054';padding-right: .3em;}.expanded > legend:before, .expanded > label:before  {font-weight: 900;font-family: 'Font Awesome 5 Free';content: '\\f078';padding-right: .2em;}\n"], dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: RootComponent, selector: "root-widget", inputs: ["dataIndex", "layoutIndex", "layout", "isOrderable", "isFlexItem"] }] }); }
 }
 i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImport: i0, type: SectionComponent, decorators: [{
             type: Component,
@@ -8315,7 +8324,7 @@ i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.7", ngImpor
         [class]="options?.labelHelpBlockClass || ''"
         [innerHTML]="options?.description"></p>
       </div>
-    </fieldset>`, styles: [".legend{font-weight:700}.expandable>legend:before,.expandable>label:before{content:\"\\25b6\";padding-right:.3em}.expanded>legend:before,.expanded>label:before{content:\"\\25bc\";padding-right:.2em}\n"] }]
+    </fieldset>`, styles: [".legend{font-weight:700}.expandable > legend, .expandable > label, .expanded > legend, .expanded > label  {cursor: pointer;}.expandable > legend:before, .expandable > label:before  {font-weight: 900;font-family: 'Font Awesome 5 Free';content: '\\f054';padding-right: .3em;}.expanded > legend:before, .expanded > label:before  {font-weight: 900;font-family: 'Font Awesome 5 Free';content: '\\f078';padding-right: .2em;}\n"] }]
         }], ctorParameters: () => [{ type: JsonSchemaFormService }], propDecorators: { layoutNode: [{
                 type: Input
             }], layoutIndex: [{
@@ -8336,6 +8345,16 @@ class SelectComponent {
         this.options = this.layoutNode.options || {};
         this.selectList = buildTitleMap(this.options.titleMap || this.options.enumNames, this.options.enum, !!this.options.required, !!this.options.flatList);
         this.jsf.initializeControl(this);
+        this.valueChanges = this.formControl.valueChanges.subscribe((change) => {
+            if (change === 'null') {
+                this.formControl.setValue(null);
+            }
+        });
+    }
+    ngOnDestroy() {
+      if (this.valueChanges) {
+          this.valueChanges.unsubscribe();
+      }
     }
     updateValue(event) {
         this.jsf.updateValue(this, event.target.value);
